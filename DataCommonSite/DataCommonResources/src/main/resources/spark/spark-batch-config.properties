# spark \u5E38\u89C4 \u914D\u7F6E   \u4E0D\u5305\u62EC \u6D41\u5F0F\u5904\u7406\u7684 \u914D\u7F6E

#################### \u5168\u5C40  #############################
#\u5728\u7528\u6237\u6CA1\u6709\u6307\u5B9A\u65F6\uFF0C\u7528\u4E8E\u5206\u5E03\u5F0F\u968F\u673A\u64CD\u4F5C(groupByKey,reduceByKey\u7B49\u7B49)\u7684\u9ED8\u8BA4\u7684\u4EFB\u52A1\u6570\uFF08 shuffle\u8FC7\u7A0B\u4E2D task\u7684\u4E2A\u6570 \uFF09\u3002
#\u9ED8\u8BA4\u4E3A 8  
spark.default.parallelism=16

#Spark\u7528\u4E8E\u7F13\u5B58\u7684\u5185\u5B58\u5927\u5C0F\u6240\u5360\u7528\u7684Java\u5806\u7684\u6BD4\u7387\u3002\u8FD9\u4E2A\u4E0D\u5E94\u8BE5\u5927\u4E8EJVM\u4E2D\u8001\u5E74\u4EE3\u6240\u5206\u914D\u7684\u5185\u5B58\u5927\u5C0F\uFF0C
#\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u8001\u5E74\u4EE3\u5927\u5C0F\u662F\u5806\u5927\u5C0F\u76842/3\uFF0C\u4F46\u662F\u4F60\u53EF\u4EE5\u901A\u8FC7\u914D\u7F6E\u4F60\u7684\u8001\u5E74\u4EE3\u7684\u5927\u5C0F\uFF0C\u7136\u540E\u518D\u53BB\u589E\u52A0\u8FD9\u4E2A\u6BD4\u7387\u3002
#\u9ED8\u8BA4\u4E3A 0.66
#spark 1.6 \u540E \u8FC7\u671F
#spark.storage.memoryFraction=0.66

#\u5728spark1.6.0\u7248\u672C\u9ED8\u8BA4\u5927\u5C0F\u4E3A\uFF1A (\u201CJava Heap\u201D \u2013 300MB) * 0.75\u3002
#\u4F8B\u5982\uFF1A\u5982\u679C\u5806\u5185\u5B58\u5927\u5C0F\u67094G\uFF0C\u5C06\u67092847MB\u7684Spark Memory,Spark Memory=(4*1024MB-300)*0.75=2847MB\u3002
#\u8FD9\u90E8\u5206\u5185\u5B58\u4F1A\u88AB\u5206\u6210\u4E24\u90E8\u5206\uFF1AStorage Memory\u548CExecution Memory\uFF0C
#\u800C\u4E14\u8FD9\u4E24\u90E8\u5206\u7684\u8FB9\u754C\u7531spark.memory.storageFraction\u53C2\u6570\u8BBE\u5B9A\uFF0C\u9ED8\u8BA4\u662F0.5\u537350%\u3002
#\u65B0\u7684\u5185\u5B58\u7BA1\u7406\u6A21\u578B\u4E2D\u7684\u4F18\u70B9\u662F\uFF0C\u8FD9\u4E2A\u8FB9\u754C\u4E0D\u662F\u56FA\u5B9A\u7684\uFF0C\u5728\u5185\u5B58\u538B\u529B\u4E0B\u8FD9\u4E2A\u8FB9\u754C\u662F\u53EF\u4EE5\u79FB\u52A8\u7684\u3002
#\u5982\u4E00\u4E2A\u533A\u57DF\u5185\u5B58\u4E0D\u591F\u7528\u65F6\u53EF\u4EE5\u4ECE\u53E6\u4E00\u533A\u57DF\u501F\u7528\u5185\u5B58\u3002
spark.memory.fraction=0.75
spark.memory.storageFraction=0.5

#\u662F\u5426\u8981\u538B\u7F29\u5E8F\u5217\u5316\u7684RDD\u5206\u533A\uFF08\u6BD4\u5982\uFF0CStorageLevel.MEMORY_ONLY_SER\uFF09\u3002
#\u5728\u6D88\u8017\u4E00\u70B9\u989D\u5916\u7684CPU\u65F6\u95F4\u7684\u4EE3\u4EF7\u4E0B\uFF0C\u53EF\u4EE5\u6781\u5927\u7684\u63D0\u9AD8\u51CF\u5C11\u7A7A\u95F4\u7684\u4F7F\u7528\u3002
#\u9ED8\u8BA4\u4E3A false
spark.rdd.compress=true

#The codec used to compress internal data such as RDD partitions, 
#broadcast variables and shuffle outputs. By default, 
#Spark provides three codecs: lz4, lzf, and snappy. You can also use fully qualified class names to specify the codec, 
#e.g. 
# 1. org.apache.spark.io.LZ4CompressionCodec, 
# 2. org.apache.spark.io.LZFCompressionCodec, 
# 3. org.apache.spark.io.SnappyCompressionCodec.   default
spark.io.compression.codec=org.apache.spark.io.SnappyCompressionCodec

#Block size (in bytes) used in Snappy compression, 
#in the case when Snappy compression codec is used. 
#Lowering this block size will also lower shuffle memory usage when Snappy is used.
#default : 32K
spark.io.compression.snappy.blockSize=32768


#\u540C\u65F6\u83B7\u53D6\u6BCF\u4E00\u4E2A\u5206\u89E3\u4EFB\u52A1\u7684\u65F6\u5019\uFF0C\u6620\u5C04\u8F93\u51FA\u6587\u4EF6\u7684\u6700\u5927\u7684\u5C3A\u5BF8\uFF08\u4EE5\u5146\u4E3A\u5355\u4F4D\uFF09\u3002
#\u7531\u4E8E\u5BF9\u6BCF\u4E2A\u8F93\u51FA\u90FD\u9700\u8981\u6211\u4EEC\u53BB\u521B\u5EFA\u4E00\u4E2A\u7F13\u51B2\u533A\u53BB\u63A5\u53D7\u5B83\uFF0C\u8FD9\u4E2A\u5C5E\u6027\u503C\u4EE3\u8868\u4E86\u5BF9\u6BCF\u4E2A\u5206\u89E3\u4EFB\u52A1\u6240\u4F7F\u7528\u7684\u5185\u5B58\u7684\u4E00\u4E2A\u4E0A\u9650\u503C\uFF0C
#\u56E0\u6B64\u9664\u975E\u4F60\u673A\u5668\u5185\u5B58\u5F88\u5927\uFF0C\u6700\u597D\u8FD8\u662F\u914D\u7F6E\u4E00\u4E0B\u8FD9\u4E2A\u503C\u3002
#\u9ED8\u8BA448
spark.reducer.maxSizeInFlight=48

#\u8FD9\u4E2A\u914D\u7F6E\u53C2\u6570\u4EC5\u9002\u7528\u4E8EHashShuffleMananger\u7684\u5B9E\u73B0\uFF0C\u540C\u6837\u662F\u4E3A\u4E86\u89E3\u51B3\u751F\u6210\u8FC7\u591A\u6587\u4EF6\u7684\u95EE\u9898\uFF0C
#\u91C7\u7528\u7684\u65B9\u5F0F\u662F\u5728\u4E0D\u540C\u6279\u6B21\u8FD0\u884C\u7684Map\u4EFB\u52A1\u4E4B\u95F4\u91CD\u7528Shuffle\u8F93\u51FA\u6587\u4EF6\uFF0C\u4E5F\u5C31\u662F\u8BF4\u5408\u5E76\u7684\u662F\u4E0D\u540C\u6279\u6B21\u7684Map\u4EFB\u52A1\u7684\u8F93\u51FA\u6570\u636E\uFF0C
#\u4F46\u662F\u6BCF\u4E2AMap\u4EFB\u52A1\u6240\u9700\u8981\u7684\u6587\u4EF6\u8FD8\u662F\u53D6\u51B3\u4E8EReduce\u5206\u533A\u7684\u6570\u91CF\uFF0C\u56E0\u6B64\uFF0C\u5B83\u5E76\u4E0D\u51CF\u5C11\u540C\u65F6\u6253\u5F00\u7684\u8F93\u51FA\u6587\u4EF6\u7684\u6570\u91CF\uFF0C
#\u56E0\u6B64\u5BF9\u5185\u5B58\u4F7F\u7528\u91CF\u7684\u51CF\u5C11\u5E76\u6CA1\u6709\u5E2E\u52A9\u3002\u53EA\u662FHashShuffleManager\u91CC\u7684\u4E00\u4E2A\u6298\u4E2D\u7684\u89E3\u51B3\u65B9\u6848\u3002
#\u9ED8\u8BA4\u4E3Afalse
#spark.shuffle.consolidateFiles=false

#java.io.Externalizable. Java serialization is flexible but often quite slow, and leads to large serialized formats for many classes.
#default java.io.Serializable
#spark.serializer=org.apache.spark.serializer.KryoSerializer

#Speculation\u662F\u5728\u4EFB\u52A1\u8C03\u5EA6\u7684\u65F6\u5019\uFF0C\u5982\u679C\u6CA1\u6709\u9002\u5408\u5F53\u524D\u672C\u5730\u6027\u8981\u6C42\u7684\u4EFB\u52A1\u53EF\u4F9B\u8FD0\u884C\uFF0C
#\u5C06\u8DD1\u5F97\u6162\u7684\u4EFB\u52A1\u5728\u7A7A\u95F2\u8BA1\u7B97\u8D44\u6E90\u4E0A\u518D\u5EA6\u8C03\u5EA6\u7684\u884C\u4E3A\uFF0C\u8FD9\u4E9B\u53C2\u6570\u8C03\u6574\u8FD9\u4E9B\u884C\u4E3A\u7684\u9891\u7387\u548C\u5224\u65AD\u6307\u6807\uFF0C\u9ED8\u8BA4\u662F\u4E0D\u4F7F\u7528Speculation\u7684
#\u9ED8\u8BA4\u4E3Afalse        
#  \u614E\u7528   \u53EF\u80FD\u5BFC\u81F4\u6570\u636E\u91CD\u590D\u7684\u73B0\u8C61
#spark.speculation=true

#task\u5931\u8D25\u91CD\u8BD5\u6B21\u6570
#\u9ED8\u8BA4\u4E3A4
spark.task.maxFailures=8

#Spark \u662F\u6709\u4EFB\u52A1\u7684\u9ED1\u540D\u5355\u673A\u5236\u7684\uFF0C\u4F46\u662F\u8FD9\u4E2A\u914D\u7F6E\u5728\u5B98\u65B9\u6587\u6863\u91CC\u9762\u5E76\u6CA1\u6709\u5199\uFF0C\u53EF\u4EE5\u8BBE\u7F6E\u4E0B\u9762\u7684\u53C2\u6570\uFF0C
#\u6BD4\u5982\u8BBE\u7F6E\u6210\u4E00\u5206\u949F\u4E4B\u5185\u4E0D\u8981\u518D\u628A\u4EFB\u52A1\u53D1\u5230\u8FD9\u4E2A Executor \u4E0A\u4E86\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2\u3002
#spark.scheduler.executorTaskBlacklistTime=60000

#\u8D85\u8FC7\u8FD9\u4E2A\u65F6\u95F4\uFF0C\u53EF\u4EE5\u6267\u884C NODE_LOCAL \u7684\u4EFB\u52A1
#\u9ED8\u8BA4\u4E3A 3000
spark.locality.wait.process=1

#\u8D85\u8FC7\u8FD9\u4E2A\u65F6\u95F4\uFF0C\u53EF\u4EE5\u6267\u884C RACK_LOCAL \u7684\u4EFB\u52A1
#\u9ED8\u8BA4\u4E3A 3000
spark.locality.wait.node=3 

#\u8D85\u8FC7\u8FD9\u4E2A\u65F6\u95F4\uFF0C\u53EF\u4EE5\u6267\u884C ANY \u7684\u4EFB\u52A1
#\u9ED8\u8BA4\u4E3A 3000
spark.locality.wait.rack=1000

#################### yarn  ###########################

# \u63D0\u4EA4\u7684jar\u6587\u4EF6  \u7684\u526F\u672C\u6570  
#\u9ED8\u8BA4\u4E3A 3
spark.yarn.submit.file.replication=1

#container\u4E2D\u7684\u7EBF\u7A0B\u6570
#\u9ED8\u8BA4\u4E3A 25 
spark.yarn.containerLauncherMaxThreads=25

#\u89E3\u51B3yarn-cluster\u6A21\u5F0F\u4E0B \u5BF9\u5904\u7406  permGen space oom\u5F02\u5E38\u5F88\u6709\u7528
#spark.yarn.am.extraJavaOptions=
#spark.driver.extraJavaOptions=-XX:PermSize=512M -XX:MaxPermSize=1024M

#\u5BF9\u8C61\u6307\u9488\u538B\u7F29 \u548C gc\u65E5\u5FD7\u6536\u96C6\u6253\u5370
#\u2013\u8BBE\u7F6E\u6C38\u4E45\u533A\u7684\u521D\u59CB\u7A7A\u95F4\u548C\u6700\u5927\u7A7A\u95F4
#-XX:PermSize \u8BBE\u7F6E\u6301\u4E45\u4EE3(perm gen)\u521D\u59CB\u503C\uFF0C\u7269\u7406\u5185\u5B58\u76841/64
#-XX:MaxPermSize \u8BBE\u7F6E\u6301\u4E45\u4EE3\u6700\u5927\u503C\uFF0C\u7269\u7406\u5185\u5B58\u76841/4
#spark.executor.extraJavaOptions=-XX:PermSize=512M -XX:MaxPermSize=1024M -XX:MaxDirectMemorySize=1536M -XX:+UseCompressedOops -XX:+PrintGCDetails -XX:+PrintGCTimeStamps
#-XX:-UseGCOverheadLimit
#GC\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u6709\u4E00\u4E2A\u9650\u5236\uFF0C\u9ED8\u8BA4\u662FGC\u65F6\u95F4\u4E0D\u80FD\u8D85\u8FC72%\u7684CPU\u65F6\u95F4\uFF0C\u4F46\u662F\u5982\u679C\u5927\u91CF\u5BF9\u8C61\u521B\u5EFA\uFF08\u5728Spark\u91CC\u5F88\u5BB9\u6613\u51FA\u73B0\uFF0C\u4EE3\u7801\u6A21\u5F0F\u5C31\u662F\u4E00\u4E2ARDD\u8F6C\u4E0B\u4E00\u4E2ARDD\uFF09\uFF0C
#\u5C31\u4F1A\u5BFC\u81F4\u5927\u91CF\u7684GC\u65F6\u95F4\uFF0C\u4ECE\u800C\u51FA\u73B0OutOfMemoryError: GC overhead limit exceeded\uFF0C\u53EF\u4EE5\u901A\u8FC7\u8BBE\u7F6E-XX:-UseGCOverheadLimit\u5173\u6389\u5B83\u3002
#-XX:+UseCompressedOops  \u53EF\u4EE5\u538B\u7F29\u6307\u9488\uFF088\u5B57\u8282\u53D8\u62104\u5B57\u8282\uFF09
#-Xmn1g \u8BBE\u7F6E\u5E74\u8F7B\u4EE3\u5927\u5C0F
    #\u5E74\u8F7B\u4EE3\u5927\u5C0F\u9009\u62E9
    #\u54CD\u5E94\u65F6\u95F4\u4F18\u5148\u7684\u5E94\u7528\uFF1A\u5C3D\u53EF\u80FD\u8BBE\u5927\uFF0C\u76F4\u5230\u63A5\u8FD1\u7CFB\u7EDF\u7684\u6700\u4F4E\u54CD\u5E94\u65F6\u95F4\u9650\u5236\uFF08\u6839\u636E\u5B9E\u9645\u60C5\u51B5\u9009\u62E9\uFF09\u3002\u5728\u6B64\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5E74\u8F7B\u4EE3\u6536\u96C6\u53D1\u751F\u7684\u9891\u7387\u4E5F\u662F\u6700\u5C0F\u7684\u3002\u540C\u65F6\uFF0C\u51CF\u5C11\u5230\u8FBE\u5E74\u8001\u4EE3\u7684\u5BF9\u8C61\u3002
    #\u541E\u5410\u91CF\u4F18\u5148\u7684\u5E94\u7528\uFF1A\u5C3D\u53EF\u80FD\u7684\u8BBE\u7F6E\u5927\uFF0C\u53EF\u80FD\u5230\u8FBEGbit\u7684\u7A0B\u5EA6\u3002\u56E0\u4E3A\u5BF9\u54CD\u5E94\u65F6\u95F4\u6CA1\u6709\u8981\u6C42\uFF0C\u5783\u573E\u6536\u96C6\u53EF\u4EE5\u5E76\u884C\u8FDB\u884C\uFF0C\u4E00\u822C\u9002\u54088CPU\u4EE5\u4E0A\u7684\u5E94\u7528\u3002
#\u53EA\u9002\u5408 executor \u7684\u5185\u5B58\u4E3A 2 - 4G \u7684\u60C5\u51B5 \u57283G\u62164G\u7684\u60C5\u51B5\u4E0B \u53EF\u4EE5\u9002\u5F53\u589E\u52A0 Xmn1g \u7684\u5927\u5C0F
spark.executor.extraJavaOptions=-XX:PermSize=512M -XX:MaxPermSize=1024M -XX:+CMSClassUnloadingEnabled -XX:-ResizePLAB -XX:-UseGCOverheadLimit -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=3 -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCompressedOops -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log -XX:+PrintGCApplicationStoppedTime -XX:+HeapDumpOnOutOfMemoryError
#\u5F53shuffle\u7F13\u5B58\u7684\u6570\u636E\u8D85\u8FC7\u6B64\u503C  \u5F3A\u5236\u5237\u78C1\u76D8  \u5355\u4F4D\u4E3A byte
#spark.shuffle.spill.initialMemoryThreshold=671088640

################### AKKA \u76F8\u5173 ##########################

#\u5728\u63A7\u5236\u9762\u677F\u901A\u4FE1\uFF08\u5E8F\u5217\u5316\u4EFB\u52A1\u548C\u4EFB\u52A1\u7ED3\u679C\uFF09\u7684\u65F6\u5019\u6D88\u606F\u5C3A\u5BF8\u7684\u6700\u5927\u503C\uFF0C\u5355\u4F4D\u662FMB\u3002
#\u5982\u679C\u4F60\u9700\u8981\u7ED9\u9A71\u52A8\u5668\u53D1\u56DE\u5927\u5C3A\u5BF8\u7684\u7ED3\u679C\uFF08\u6BD4\u5982\u4F7F\u7528\u5728\u4E00\u4E2A\u5927\u7684\u6570\u636E\u96C6\u4E0A\u9762\u4F7F\u7528collect()\u65B9\u6CD5\uFF09\uFF0C\u90A3\u4E48\u4F60\u5C31\u8BE5\u589E\u52A0\u8FD9\u4E2A\u503C\u4E86\u3002
#\u9ED8\u8BA4\u4E3A 10
spark.akka.frameSize=1024

#\u7528\u4E8E\u901A\u4FE1\u7684actor\u7EBF\u7A0B\u6570\u91CF\u3002\u5982\u679C\u9A71\u52A8\u5668\u6709\u5F88\u591ACPU\u6838\u5FC3\uFF0C\u90A3\u4E48\u5728\u5927\u96C6\u7FA4\u4E0A\u53EF\u4EE5\u589E\u5927\u8FD9\u4E2A\u503C\u3002
#\u9ED8\u8BA4\u4E3A 4
spark.akka.threads=8

#Spark\u8282\u70B9\u4E4B\u95F4\u901A\u4FE1\u7684\u8D85\u65F6\u65F6\u95F4\uFF0C\u4EE5\u79D2\u4E3A\u5355\u4F4D
#\u9ED8\u8BA4\u4E3A20s
spark.akka.timeout=120

#exector\u7684\u5806\u5916\u5185\u5B58\uFF08\u4E0D\u4F1A\u5360\u7528 \u5206\u914D\u7ED9executor\u7684jvm\u5185\u5B58\uFF09
#spark.yarn.executor.memoryOverhead=2560


# G1 GC\u5783\u573E\u56DE\u6536 -Xms88g -Xmx88g
#\u591A\u6838\uFF0C6G\u4EE5\u4E0A\u7684heap
#\u5C06InitiatingHeapOccupancyPercent\u53C2\u6570\u8C03\u4F4E\uFF08\u9ED8\u8BA4\u503C\u662F45\uFF09\uFF0C\u53EF\u4EE5\u4F7FG1 GC\u6536\u96C6\u5668\u66F4\u65E9\u5F00\u59CBMixed GC\uFF1B\u4F46\u53E6\u4E00\u65B9\u9762\uFF0C\u4F1A\u589E\u52A0GC\u53D1\u751F\u9891\u7387\u3002
#\u63D0\u9AD8ConcGCThreads\u7684\u503C\uFF0C\u5728Mixed GC\u9636\u6BB5\u6295\u5165\u66F4\u591A\u7684\u5E76\u53D1\u7EBF\u7A0B\uFF0C\u4E89\u53D6\u63D0\u9AD8\u6BCF\u6B21\u6682\u505C\u7684\u6548\u7387\u3002\u4F46\u662F\u6B64\u53C2\u6570\u4F1A\u5360\u7528\u4E00\u5B9A\u7684\u6709\u6548\u5DE5\u4F5C\u7EBF\u7A0B\u8D44\u6E90\u3002
# G1\u5783\u573E\u6536\u96C6\u5668\u5728JDK7 update 4\u4E4B\u540E\u5BF9\u5927\u4E8E4G\u7684\u5806\u6709\u4E86\u66F4\u597D\u7684\u652F\u6301\uFF0CG1\u662F\u4E00\u4E2A\u9488\u5BF9\u591A\u5904\u7406\u5668\u5927\u5BB9\u91CF\u5185\u5B58\u7684\u670D\u52A1\u5668\u7AEF\u7684\u5783\u573E\u6536\u96C6\u5668\uFF0C\u5176\u76EE\u6807\u662F\u5728\u5B9E\u73B0\u9AD8\u541E\u5410\u91CF\u7684\u540C\u65F6\uFF0C\u5C3D\u53EF\u80FD\u7684\u6EE1\u8DB3\u5783\u573E\u6536\u96C6\u6682\u505C\u65F6\u95F4\u7684\u8981\u6C42
#-XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -XX:InitiatingHeapOccupancyPercent=35 -XX:ConcGCThread=20 -XX:+AlwaysPreTouch -XX:-UseGCOverheadLimit -XX:-ResizePLAB -XX:+UseCompressedOops -XX:+PrintFlagsFinal -XX:+PrintReferenceGC -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintAdaptiveSizePolicy


#CMS\u4ECD\u7136\u662F\u6700\u4F73\u7684\u9ED8\u8BA4\u9009\u62E9\u3002
#heap\u5C0F\u4E8E3g\u4E0D\u5EFA\u8BAE\u4F7F\u7528CMS GC\uFF0C \u4E00\u822C\u6765\u8BF4\u5728heap size>8G\u540E\u57FA\u672C\u4E0A\u90FD\u5F97\u9009\u62E9CMS GC
#\u5F88\u591A\u5E94\u7528\u5BF9\u54CD\u5E94\u65F6\u95F4\u7684\u8981\u6C42\u8981\u5927\u4E8E\u541E\u5410\u91CF\u3002
#YGC\u5E76\u4E0D\u6682\u505C\u591A\u5C11\u65F6\u95F4\uFF0C\u4F46FGC\u5BF9\u65F6\u95F4\u7684\u6682\u7528\u8FD8\u662F\u5F88\u957F\u7684\u3002\u7279\u522B\u662F\u5728\u5E74\u8001\u533A\u4F7F\u7528\u7684\u7A7A\u95F4\u8F83\u591A\u65F6\u3002
#\u56E0\u6B64\uFF0C HotSpot\u5F15\u5165\u4E86\u4E00\u4E2A\u53EB\u505ACMS\u7684\u6536\u96C6\u5668\uFF0C\u4E5F\u53EB\u4F4E\u5EF6\u65F6\u6536\u96C6\u5668\u3002
#-XX:PermSize=512M -XX:MaxPermSize=1024M -XX:+CMSClassUnloadingEnabled -XX:-ResizePLAB -XX:-UseGCOverheadLimit -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=3 -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+UseCompressedOops -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:gc.log -XX:+PrintGCApplicationStoppedTime -XX:+HeapDumpOnOutOfMemoryError



#ParallelGC
#\u5E94\u7528\u5F00\u542F\u7684\u7EBF\u7A0B\u8F83\u591A\u65F6\uFF0C\u6700\u597D\u4F7F\u7528-XX:-ResizePLAB\u6765\u5173\u95EDPLAB()\u7684\u5927\u5C0F\u8C03\u6574\uFF0C\u4EE5\u907F\u514D\u5927\u91CF\u7684\u7EBF\u7A0B\u901A\u4FE1\u6240\u5BFC\u81F4\u7684\u6027\u80FD\u4E0B\u964D\u3002
#-XX:PermSize=512M -XX:MaxPermSize=1024M -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:ParallelGCThreads=20 -XX:-UseGCOverheadLimit -XX:-ResizePLAB -XX:+UseCompressedOops -XX:+PrintFlagsFinal -XX:+PrintReferenceGC -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintAdaptiveSizePolicy -XX:+PrintGCApplicationStoppedTime